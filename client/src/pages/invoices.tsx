import { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { FileText, Download, Send, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface Invoice {
  id: string;
  invoiceNumber: string;
  invoiceDate: string;
  totalAmount: number;
  status: 'draft' | 'sent' | 'paid';
  supplier?: {
    name: string;
    bin: string;
  };
  buyer?: {
    name: string;
    bin: string;
  };
}

export default function InvoicesPage() {
  const { toast } = useToast();
  
  const { data: invoices = [], isLoading, error } = useQuery({
    queryKey: ['/api/invoices'],
    queryFn: async () => {
      const response = await fetch('/api/invoices');
      if (!response.ok) {
        throw new Error('Failed to fetch invoices');
      }
      return response.json();
    }
  });

  const handleDownloadPDF = async (invoice: Invoice) => {
    try {
      const response = await fetch(`/api/invoices/${invoice.id}/pdf`);
      if (!response.ok) throw new Error('Failed to download PDF');
      
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.download = `–°—á–µ—Ç_${invoice.invoiceNumber}.pdf`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å PDF",
        variant: "destructive",
      });
    }
  };

  const handleSendToTelegram = async (invoice: Invoice) => {
    try {
      const response = await fetch('/api/telegram/send-invoice', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ invoiceId: invoice.id })
      });
      
      if (!response.ok) throw new Error('Failed to send to Telegram');
      
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ",
        description: "–°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram",
      });
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram",
        variant: "destructive",
      });
    }
  };

  const getStatusColor = (status: Invoice['status']) => {
    switch (status) {
      case 'draft': return 'bg-gray-500';
      case 'sent': return 'bg-blue-500';
      case 'paid': return 'bg-green-500';
      default: return 'bg-gray-500';
    }
  };

  const getStatusText = (status: Invoice['status']) => {
    switch (status) {
      case 'draft': return '–ß–µ—Ä–Ω–æ–≤–∏–∫';
      case 'sent': return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      case 'paid': return '–û–ø–ª–∞—á–µ–Ω';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="mx-auto max-w-6xl">
        <div className="mb-8">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">–ú–æ–∏ —Å—á–µ—Ç–∞</h1>
              <p className="text-gray-600 mt-2">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —Å—á–µ—Ç–∞–º–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É</p>
            </div>
            <div className="flex gap-3">
              <Button 
                variant="outline"
                onClick={() => window.location.href = '/'}
              >
                <FileText className="h-4 w-4 mr-2" />
                –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç
              </Button>
            </div>
          </div>
        </div>

        {/* Telegram Info Card */}
        <Card className="bg-blue-50 border-blue-200 mb-6">
          <CardContent className="p-6">
            <div className="flex items-start space-x-4">
              <div className="w-12 h-12 bg-blue-500 rounded-lg flex items-center justify-center flex-shrink-0">
                <Send className="w-6 h-6 text-white" />
              </div>
              <div className="flex-1">
                <h3 className="font-semibold text-blue-900 mb-2">
                  üì± Telegram –±–æ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
                </h3>
                <p className="text-blue-700 text-sm mb-3">
                  –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ —Å–≤–æ–∏ —Å—á–µ—Ç–∞ –ø—Ä—è–º–æ –≤ Telegram! 
                  –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/invoices</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤.
                </p>
                <div className="flex gap-2 text-xs text-blue-600">
                  <span>‚Ä¢ <strong>/start</strong> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É</span>
                  <span>‚Ä¢ <strong>/invoices</strong> - –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤</span>
                  <span>‚Ä¢ <strong>/help</strong> - –ü–æ–º–æ—â—å</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <div className="grid gap-4">
          {isLoading ? (
            <Card>
              <CardContent className="p-8 text-center">
                <Loader2 className="mx-auto h-8 w-8 text-gray-400 animate-spin mb-4" />
                <p className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—á–µ—Ç–æ–≤...</p>
              </CardContent>
            </Card>
          ) : error ? (
            <Card>
              <CardContent className="p-8 text-center">
                <FileText className="mx-auto h-12 w-12 text-red-400 mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                </h3>
                <p className="text-gray-500 mb-4">
                  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
                </p>
                <Button onClick={() => window.location.reload()}>
                  –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                </Button>
              </CardContent>
            </Card>
          ) : invoices.length === 0 ? (
            <Card>
              <CardContent className="p-8 text-center">
                <FileText className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  –°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </h3>
                <p className="text-gray-500 mb-4">
                  –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞
                </p>
                <Button onClick={() => window.location.href = '/'}>
                  –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç
                </Button>
              </CardContent>
            </Card>
          ) : (
            invoices.map((invoice) => (
              <Card key={invoice.id} className="hover:shadow-md transition-shadow">
                <CardHeader className="pb-3">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg">
                      –°—á–µ—Ç ‚Ññ {invoice.invoiceNumber}
                    </CardTitle>
                    <Badge className={getStatusColor(invoice.status || 'draft')}>
                      {getStatusText(invoice.status || 'draft')}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                    <div>
                      <p className="text-sm text-gray-500">–î–∞—Ç–∞</p>
                      <p className="font-medium">
                        {new Date(invoice.invoiceDate).toLocaleDateString('ru-RU')}
                      </p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">–ü–æ—Å—Ç–∞–≤—â–∏–∫</p>
                      <p className="font-medium truncate" title={invoice.supplier?.name}>
                        {invoice.supplier?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                      </p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-500">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</p>
                      <p className="font-medium truncate" title={invoice.buyer?.name}>
                        {invoice.buyer?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                      </p>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-500">–°—É–º–º–∞</p>
                      <p className="text-xl font-bold text-green-600">
                        {invoice.totalAmount.toLocaleString('ru-RU')} ‚Ç∏
                      </p>
                    </div>
                    <div className="flex gap-2">
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => handleDownloadPDF(invoice)}
                      >
                        <Download className="h-4 w-4 mr-1" />
                        PDF
                      </Button>
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={() => handleSendToTelegram(invoice)}
                      >
                        <Send className="h-4 w-4 mr-1" />
                        –í Telegram
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))
          )}
        </div>
      </div>
    </div>
  );
}