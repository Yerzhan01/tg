import TelegramBot from 'node-telegram-bot-api';
import { storage } from './storage';
import { InvoiceWithDetails } from '@shared/schema';
import crypto from 'crypto';

class InvoiceTelegramBot {
  private bot: TelegramBot | null = null;

  constructor() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (token) {
      this.bot = new TelegramBot(token, { polling: false });
      this.setupCommands();
      this.setupWebhook();
      this.setupBotMenu();
    }
  }

  private getBaseUrl(): string {
    if (process.env.NODE_ENV === 'production') {
      return 'https://kazinvoice.brnd.kz';
    }
    
    const devDomain = process.env.REPLIT_DEV_DOMAIN || 
                     process.env.REPLIT_DOMAIN || 
                     `${process.env.REPL_SLUG}--${process.env.REPL_OWNER}.replit.app`;
    return `https://${devDomain}`;
  }

  private async setupWebhook() {
    if (!this.bot) return;
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–º–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, kazinvoice.brnd.kz –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
      const domain = process.env.NODE_ENV === 'production' 
        ? 'kazinvoice.brnd.kz'
        : (process.env.REPLIT_DEV_DOMAIN || 
           process.env.REPLIT_DOMAIN || 
           `${process.env.REPL_SLUG}--${process.env.REPL_OWNER}.replit.app`);
      
      const webhookUrl = `https://${domain}/api/telegram/webhook/${process.env.TELEGRAM_BOT_TOKEN}`;
      await this.bot.setWebHook(webhookUrl);
      console.log('Telegram webhook set to:', webhookUrl);
    } catch (error) {
      console.error('Failed to set Telegram webhook:', error);
    }
  }

  private async setupBotMenu() {
    if (!this.bot) return;
    
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞
      await this.bot.setMyCommands([
        { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
        { command: 'invoices', description: 'üìã –ú–æ–∏ —Å—á–µ—Ç–∞' },
        { command: 'create', description: '‚ûï –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç' },
        { command: 'search', description: 'üîç –ü–æ–∏—Å–∫ —Å—á–µ—Ç–æ–≤' },
        { command: 'stats', description: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
        { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å' }
      ]);
      
      console.log('‚úÖ –ú–µ–Ω—é –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é –±–æ—Ç–∞:', error);
    }
  }

  private setupCommands() {
    if (!this.bot) return;

    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();

      if (!telegramId) return;

      const user = await storage.getUserByTelegramId(telegramId);
      
      if (user) {
        await this.bot?.sendMessage(chatId, 
          `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—á–µ—Ç–æ–≤ –†–ö! üìÑ\n\n` +
          `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π.\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π.`,
          {
            reply_markup: {
              keyboard: [
                [
                  { text: 'üìã –ú–æ–∏ —Å—á–µ—Ç–∞' },
                  { text: '‚ûï –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç' }
                ],
                [
                  { text: 'üîç –ü–æ–∏—Å–∫' },
                  { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }
                ],
                [
                  { text: '‚ùì –ü–æ–º–æ—â—å' }
                ]
              ],
              resize_keyboard: true,
              persistent: true
            }
          }
        );
      } else {
        await this.bot?.sendMessage(chatId,
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n` +
          `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —á–µ—Ä–µ–∑ Telegram.\n\n` +
          `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram"`
        );
      }
    });

    this.bot.onText(/\/invoices/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();

      console.log('=== TELEGRAM /INVOICES COMMAND ===');
      console.log('Chat ID:', chatId);
      console.log('Telegram ID:', telegramId);

      if (!telegramId) {
        console.log('ERROR: No telegramId provided');
        return;
      }

      try {
        const user = await storage.getUserByTelegramId(telegramId);
        console.log('User lookup result:', user ? `Found user ${user.id}` : 'User not found');
        
        if (!user) {
          await this.bot?.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ");
          return;
        }

        // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º getInvoicesByUserId –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const basicInvoices = await storage.getInvoicesByUserId(user.id);
        console.log('Found invoices:', basicInvoices.length);
        
        if (basicInvoices.length === 0) {
          console.log('No invoices found, sending empty message');
          await this.bot?.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤");
          return;
        }

        console.log('Processing invoices display...');

        if (basicInvoices.length <= 5) {
        // Show detailed list with buttons for few invoices
        for (const basicInvoice of basicInvoices) {
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
          const invoice = await storage.getInvoiceById(basicInvoice.id);
          if (!invoice) continue;

          const message = `üßæ –°—á–µ—Ç ‚Ññ${invoice.invoiceNumber}\n` +
                         `üìÖ –î–∞—Ç–∞: ${invoice.invoiceDate.toLocaleDateString('ru-RU')}\n` +
                         `üí∞ –°—É–º–º–∞: ${Number(invoice.totalAmount).toLocaleString('ru-RU')} ‚Ç∏\n` +
                         `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${invoice.supplier.name}\n` +
                         `üè™ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${invoice.buyer.name}\n` +
                         `üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(invoice.status || 'draft')} ${this.getStatusText(invoice.status || 'draft')}`;

          await this.bot?.sendMessage(chatId, message, {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üìÑ PDF', callback_data: `download_pdf_${invoice.id}` },
                  { text: 'üìä Excel', callback_data: `download_excel_${invoice.id}` }
                ],
                [
                  { text: 'üìã –î–µ—Ç–∞–ª–∏', callback_data: `details_${invoice.id}` },
                  { text: 'üìä –°—Ç–∞—Ç—É—Å', callback_data: `status_${invoice.id}` },
                  { text: 'üìù –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', callback_data: `copy_${invoice.id}` }
                ]
              ]
            }
          });
        }
      } else {
        // Show simple list for many invoices
        let message = "üìã –í–∞—à–∏ —Å—á–µ—Ç–∞:\n\n";
        for (const invoice of basicInvoices.slice(0, 10)) {
          message += `üßæ ‚Ññ${invoice.invoiceNumber} –æ—Ç ${invoice.invoiceDate.toLocaleDateString('ru-RU')}\n`;
          message += `üí∞ –°—É–º–º–∞: ${Number(invoice.totalAmount).toLocaleString('ru-RU')} ‚Ç∏\n`;
          message += `üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(invoice.status || 'draft')} ${this.getStatusText(invoice.status || 'draft')}\n\n`;
        }

        if (basicInvoices.length > 10) {
          message += `\n... –∏ –µ—â–µ ${basicInvoices.length - 10} —Å—á–µ—Ç–æ–≤\n`;
          message += `–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É`;
        }

        await this.bot?.sendMessage(chatId, message);
        }
        
      } catch (error) {
        console.error('Error in /invoices command:', error);
        await this.bot?.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create  
    this.bot.onText(/\/create/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();

      if (!telegramId) return;

      const user = await storage.getUserByTelegramId(telegramId);
      if (!user) {
        await this.bot?.sendMessage(chatId, 
          '‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      const baseUrl = this.getBaseUrl();
      await this.bot?.sendMessage(chatId, 
        `‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞**\n\n` +
        `–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n` +
        `üîó [–û—Ç–∫—Ä—ã—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—á–µ—Ç–æ–≤](${baseUrl})\n\n` +
        `–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å PDF –∏ Excel —Ñ–∞–π–ª–∞–º–∏.`,
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', url: baseUrl }
              ],
              [
                { text: 'üìã –ú–æ–∏ —Å—á–µ—Ç–∞', callback_data: 'list_invoices' },
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
              ]
            ]
          }
        }
      );
    });

    // –ö–æ–º–∞–Ω–¥–∞ /search - –ø–æ–∏—Å–∫ —Å—á–µ—Ç–æ–≤
    this.bot.onText(/\/search (.+)/, async (msg, match) => {
      await this.handleSearchCommand(msg, match?.[1] || '');
    });

    // –ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º
    this.bot.onText(/\/stats/, async (msg) => {
      await this.handleStatsCommand(msg);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    this.bot.on('message', async (msg) => {
      if (!msg.text || msg.text.startsWith('/')) return;
      
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      if (!telegramId) return;
      
      const user = await storage.getUserByTelegramId(telegramId);
      if (!user) return;

      switch (msg.text) {
        case 'üìã –ú–æ–∏ —Å—á–µ—Ç–∞':
          await this.showInvoicesList(chatId, user.id);
          break;
        case '‚ûï –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç':
          const baseUrl = this.getBaseUrl();
          await this.bot?.sendMessage(chatId, 
            `‚ûï **–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç**\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`,
            { 
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', url: baseUrl }]
                ]
              }
            }
          );
          break;
        case 'üîç –ü–æ–∏—Å–∫':
          await this.bot?.sendMessage(chatId, 
            `üîç **–ü–æ–∏—Å–∫ —Å—á–µ—Ç–æ–≤**\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: \`/search –≤–∞—à_–∑–∞–ø—Ä–æ—Å\`\n\n` +
            `–ü—Ä–∏–º–µ—Ä—ã:\n` +
            `‚Ä¢ \`/search 100000\` - –ø–æ —Å—É–º–º–µ\n` +
            `‚Ä¢ \`/search –¢–û–û\` - –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n` +
            `‚Ä¢ \`/search ‚Ññ123\` - –ø–æ –Ω–æ–º–µ—Ä—É`,
            { parse_mode: 'Markdown' }
          );
          break;
        case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
          await this.showUserStats(chatId, user.id);
          break;
        case '‚ùì –ü–æ–º–æ—â—å':
          await this.bot?.sendMessage(chatId,
            `‚ùì **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n` +
            `**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n` +
            `‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Å—á–µ—Ç–æ–≤\n` +
            `‚Ä¢ üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö PDF –∏ Excel —Ñ–∞–π–ª–æ–≤\n` +
            `‚Ä¢ üîç –ü–æ–∏—Å–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º\n` +
            `‚Ä¢ üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å—á–µ—Ç–æ–≤\n` +
            `‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å—á–µ—Ç–∞—Ö\n\n` +
            `**–ö–æ–º–∞–Ω–¥—ã:**\n` +
            `üöÄ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
            `üìã /invoices - –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤\n` +
            `‚ûï /create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç\n` +
            `üîç /search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ —Å—á–µ—Ç–æ–≤\n` +
            `üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º\n` +
            `‚ùì /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`,
            { parse_mode: 'Markdown' }
          );
          break;
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    this.bot.onText(/\/settings/, async (msg) => {
      await this.handleSettingsCommand(msg);
    });

    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;
      await this.bot?.sendMessage(chatId,
        `‚ùì **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**\n\n` +
        `–≠—Ç–æ—Ç –±–æ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—á–µ—Ç–æ–≤ –†–ö.\n\n` +
        `**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n` +
        `‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Å—á–µ—Ç–æ–≤\n` +
        `‚Ä¢ üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö PDF –∏ Excel —Ñ–∞–π–ª–æ–≤\n` +
        `‚Ä¢ üîç –ü–æ–∏—Å–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º\n` +
        `‚Ä¢ üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å—á–µ—Ç–æ–≤\n` +
        `‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å—á–µ—Ç–∞—Ö\n\n` +
        `**–ö–æ–º–∞–Ω–¥—ã (—Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é):**\n` +
        `üöÄ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
        `üìã /invoices - –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤\n` +
        `‚ûï /create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç\n` +
        `üîç /search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ —Å—á–µ—Ç–æ–≤\n` +
        `üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º\n` +
        `‚ùì /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`,
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìã –ú–æ–∏ —Å—á–µ—Ç–∞', callback_data: 'list_invoices' },
                { text: '‚ûï –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç', callback_data: 'create_invoice' }
              ],
              [
                { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'search_invoices' },
                { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_stats' }
              ]
            ]
          }
        }
      );
    });

    // Handle callback queries for file downloads
    this.bot.on('callback_query', async (callbackQuery) => {
      const chatId = callbackQuery.message?.chat.id;
      const telegramId = callbackQuery.from.id.toString();
      const data = callbackQuery.data;

      if (!chatId || !data) return;

      const user = await storage.getUserByTelegramId(telegramId);
      if (!user) {
        await this.bot?.answerCallbackQuery(callbackQuery.id, {
          text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"
        });
        return;
      }

      try {
        if (data === 'list_invoices') {
          await this.showInvoicesList(chatId, user.id);
          await this.bot?.answerCallbackQuery(callbackQuery.id);
          
        } else if (data === 'create_invoice') {
          const baseUrl = this.getBaseUrl();
          await this.bot?.answerCallbackQuery(callbackQuery.id, {
            text: "–û—Ç–∫—Ä—ã–≤–∞—é –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
          });
          
          await this.bot?.sendMessage(chatId, 
            `‚ûï **–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç**\n\n` +
            `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞:`,
            { 
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', url: baseUrl }]
                ]
              }
            }
          );
          
        } else if (data === 'search_invoices') {
          await this.bot?.answerCallbackQuery(callbackQuery.id);
          await this.bot?.sendMessage(chatId, 
            `üîç **–ü–æ–∏—Å–∫ —Å—á–µ—Ç–æ–≤**\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: \`/search –≤–∞—à_–∑–∞–ø—Ä–æ—Å\`\n\n` +
            `–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:\n` +
            `‚Ä¢ \`/search 100000\` - –ø–æ —Å—É–º–º–µ\n` +
            `‚Ä¢ \`/search –¢–û–û\` - –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n` +
            `‚Ä¢ \`/search ‚Ññ123\` - –ø–æ –Ω–æ–º–µ—Ä—É —Å—á–µ—Ç–∞`,
            { parse_mode: 'Markdown' }
          );
          
        } else if (data === 'show_stats') {
          await this.showUserStats(chatId, user.id);
          await this.bot?.answerCallbackQuery(callbackQuery.id);
          
        } else if (data === 'main_menu' || data === 'show_help') {
          const mockMsg = { chat: { id: chatId }, from: { id: parseInt(telegramId) } };
          const baseUrl = this.getBaseUrl();
          
          await this.bot?.answerCallbackQuery(callbackQuery.id);
          await this.bot?.sendMessage(chatId, 
            `ü§ñ **–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—á–µ—Ç–æ–≤ –†–ö**\n\n` +
            `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            { 
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'üìã –ú–æ–∏ —Å—á–µ—Ç–∞', callback_data: 'list_invoices' },
                    { text: '‚ûï –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç', callback_data: 'create_invoice' }
                  ],
                  [
                    { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'search_invoices' },
                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'show_stats' }
                  ],
                  [
                    { text: 'üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', url: baseUrl },
                    { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'show_help' }
                  ]
                ]
              }
            }
          );
          
        } else if (data.startsWith('download_pdf_')) {
          const invoiceId = data.replace('download_pdf_', '');
          await this.bot?.answerCallbackQuery(callbackQuery.id, {
            text: "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Ñ–∞–π–ª..."
          });
          
          await this.sendPDFFile(chatId, invoiceId, user.id);

        } else if (data.startsWith('download_excel_')) {
          const invoiceId = data.replace('download_excel_', '');
          await this.bot?.answerCallbackQuery(callbackQuery.id, {
            text: "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª..."
          });
          
          await this.sendExcelFile(chatId, invoiceId, user.id);

        } else if (data.startsWith('details_')) {
          const invoiceId = data.replace('details_', '');
          await this.sendInvoiceDetails(chatId, invoiceId, user.id);
          await this.bot?.answerCallbackQuery(callbackQuery.id);

        } else if (data.startsWith('status_')) {
          const invoiceId = data.replace('status_', '');
          await this.sendStatusChangeOptions(chatId, invoiceId, user.id);
          await this.bot?.answerCallbackQuery(callbackQuery.id);

        } else if (data.startsWith('copy_')) {
          const invoiceId = data.replace('copy_', '');
          await this.copyInvoice(chatId, invoiceId, user.id);
          await this.bot?.answerCallbackQuery(callbackQuery.id, {
            text: "–°—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!"
          });

        } else if (data.startsWith('set_status_')) {
          const [, status, invoiceId] = data.split('_');
          await this.changeInvoiceStatus(chatId, invoiceId, status, user.id);
          await this.bot?.answerCallbackQuery(callbackQuery.id, {
            text: "–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω!"
          });

        } else if (data === 'list_invoices') {
          await this.showInvoicesList(chatId, user.id);
          await this.bot?.answerCallbackQuery(callbackQuery.id);

        } else if (data === 'create_invoice') {
          await this.bot?.sendMessage(chatId, 
            `‚ûï –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É:\n\n` +
            `https://${process.env.REPLIT_DEV_DOMAIN || process.env.REPLIT_DOMAIN || 'your-app.replit.app'}\n\n` +
            `–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–æ—Ç–µ.`
          );
          await this.bot?.answerCallbackQuery(callbackQuery.id);

        } else if (data === 'show_help') {
          await this.showHelp(chatId);
          await this.bot?.answerCallbackQuery(callbackQuery.id);

        } else if (data === 'show_stats') {
          await this.showStats(chatId, user.id);
          await this.bot?.answerCallbackQuery(callbackQuery.id);

        } else if (data === 'search_invoices') {
          await this.bot?.sendMessage(chatId, 
            `üîç –î–ª—è –ø–æ–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n` +
            `/search <–∑–∞–ø—Ä–æ—Å>\n\n` +
            `–ù–∞–ø—Ä–∏–º–µ—Ä:\n` +
            `/search 300000 - –ø–æ–∏—Å–∫ –ø–æ —Å—É–º–º–µ\n` +
            `/search –¢–û–û "–ö–æ–º–ø–∞–Ω–∏—è" - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n` +
            `/search —É—Å–ª—É–≥–∞ - –ø–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é`
          );
          await this.bot?.answerCallbackQuery(callbackQuery.id);
        }

      } catch (error) {
        console.error('Error handling callback query:', error);
        await this.bot?.answerCallbackQuery(callbackQuery.id, {
          text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        });
      }
    });
  }

  async sendInvoice(telegramId: string, invoice: InvoiceWithDetails) {
    if (!this.bot) return;

    try {
      const message = this.formatInvoiceMessage(invoice);
      
      await this.bot.sendMessage(telegramId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìÑ –°–∫–∞—á–∞—Ç—å PDF', callback_data: `download_pdf_${invoice.id}` },
              { text: 'üìä –°–∫–∞—á–∞—Ç—å Excel', callback_data: `download_excel_${invoice.id}` }
            ],
            [
              { text: 'üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url: `${this.getBaseUrl()}/invoice/${invoice.id}` }
            ]
          ]
        }
      });
    } catch (error) {
      console.error('Error sending invoice to Telegram:', error);
    }
  }

  async sendInvoiceWithPDF(telegramId: string, invoice: any, pdfBuffer: Buffer) {
    if (!this.bot) return;

    try {
      const message = `üìÑ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ${invoice.invoiceNumber}\n\n` +
        `üìÖ –î–∞—Ç–∞: ${new Date(invoice.invoiceDate).toLocaleDateString('ru-RU')}\n` +
        `üí∞ –°—É–º–º–∞: ${invoice.totalAmount.toLocaleString('ru-RU')} ‚Ç∏\n` +
        `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${invoice.supplierName}\n` +
        `üè™ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${invoice.buyerName}`;

      console.log('Sending PDF document to Telegram ID:', telegramId);
      console.log('PDF buffer size:', pdfBuffer.length);
      
      await this.bot.sendDocument(telegramId, pdfBuffer, {
        caption: message
      }, {
        filename: `–°—á–µ—Ç_${invoice.invoiceNumber}_${new Date().toISOString().slice(0,10)}.pdf`,
        contentType: 'application/pdf'
      });
      
      console.log('PDF document sent successfully');
    } catch (error) {
      console.error('Failed to send invoice with PDF:', error);
      throw error;
    }
  }

  async processUpdate(update: any) {
    if (!this.bot) return;
    
    this.bot.processUpdate(update);
  }

  private formatInvoiceMessage(invoice: InvoiceWithDetails): string {
    return `
üßæ <b>–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ${invoice.invoiceNumber}</b>
üìÖ –æ—Ç ${invoice.invoiceDate.toLocaleDateString('ru-RU')}

<b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b>
${invoice.supplier.name}
–ë–ò–ù/–ò–ò–ù: ${invoice.supplier.bin}

<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b>
${invoice.buyer.name}
–ë–ò–ù/–ò–ò–ù: ${invoice.buyer.bin}

<b>–£—Å–ª—É–≥–∏/—Ç–æ–≤–∞—Ä—ã:</b>
${invoice.items.map((item, index) => 
  `${index + 1}. ${item.name}\n   ${item.quantity} ${item.unit} √ó ${item.price} ‚Ç∏ = ${item.total} ‚Ç∏`
).join('\n')}

üí∞ <b>–ò—Ç–æ–≥–æ: ${Number(invoice.totalAmount).toLocaleString('ru-RU')} ‚Ç∏</b>
${invoice.totalAmountWords}

üìã –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(invoice.status || 'draft')} ${this.getStatusText(invoice.status || 'draft')}
    `.trim();
  }

  private getStatusEmoji(status: string): string {
    switch (status) {
      case 'draft': return 'üìù';
      case 'sent': return 'üì§';
      case 'paid': return '‚úÖ';
      default: return 'üìÑ';
    }
  }

  private getStatusText(status: string): string {
    switch (status) {
      case 'draft': return '–ß–µ—Ä–Ω–æ–≤–∏–∫';
      case 'sent': return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      case 'paid': return '–û–ø–ª–∞—á–µ–Ω';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
    }
  }

  private async sendPDFFile(chatId: number, invoiceId: string, userId: string) {
    try {
      await this.bot?.sendMessage(chatId, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Ñ–∞–π–ª–∞...");
      
      // Get invoice data
      const invoice = await storage.getInvoiceById(invoiceId);
      if (!invoice || invoice.userId !== userId) {
        await this.bot?.sendMessage(chatId, "‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É");
        return;
      }

      // Generate PDF using internal API call (properly authenticated)
      const response = await fetch(`http://localhost:5000/api/invoices/${invoiceId}/pdf`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Internal-Request': 'true'
        },
        body: JSON.stringify({ userId })
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate PDF');
      }

      const pdfBuffer = Buffer.from(await response.arrayBuffer());
      
      const filename = `–°—á–µ—Ç_${invoice.invoiceNumber}_${new Date().toISOString().slice(0,10)}.pdf`;
      
      await this.bot?.sendDocument(chatId, pdfBuffer, {
        caption: `üìÑ –°—á–µ—Ç ‚Ññ${invoice.invoiceNumber} –æ—Ç ${invoice.invoiceDate.toLocaleDateString('ru-RU')}`
      }, {
        filename,
        contentType: 'application/pdf'
      });

    } catch (error) {
      console.error('Error sending PDF:', error);
      await this.bot?.sendMessage(chatId, 
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —Ñ–∞–π–ª–∞.\n\n" +
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞."
      );
    }
  }

  private async sendExcelFile(chatId: number, invoiceId: string, userId: string) {
    try {
      await this.bot?.sendMessage(chatId, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞...");
      
      // Get invoice data
      const invoice = await storage.getInvoiceById(invoiceId);
      if (!invoice || invoice.userId !== userId) {
        await this.bot?.sendMessage(chatId, "‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É");
        return;
      }

      // Generate Excel using internal API call (properly authenticated)
      const response = await fetch(`http://localhost:5000/api/invoices/${invoiceId}/excel`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Internal-Request': 'true'
        },
        body: JSON.stringify({ userId })
      });
      
      if (!response.ok) {
        throw new Error('Failed to generate Excel');
      }

      const excelBuffer = Buffer.from(await response.arrayBuffer());
      
      const filename = `–°—á–µ—Ç_${invoice.invoiceNumber}_${new Date().toISOString().slice(0,10)}.xlsx`;
      
      await this.bot?.sendDocument(chatId, excelBuffer, {
        caption: `üìä –°—á–µ—Ç ‚Ññ${invoice.invoiceNumber} –æ—Ç ${invoice.invoiceDate.toLocaleDateString('ru-RU')}`
      }, {
        filename,
        contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      });

    } catch (error) {
      console.error('Error sending Excel:', error);
      await this.bot?.sendMessage(chatId, 
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel —Ñ–∞–π–ª–∞.\n\n" +
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞."
      );
    }
  }

  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

  private async handleSearchCommand(msg: any, query: string) {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id.toString();

    if (!telegramId) return;

    const user = await storage.getUserByTelegramId(telegramId);
    if (!user) {
      await this.bot?.sendMessage(chatId, "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ");
      return;
    }

    try {
      const allInvoices = await storage.getInvoicesByUserId(user.id);
      
      // –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Å—á–µ—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
      const searchResults = [];
      for (const basicInvoice of allInvoices) {
        const invoice = await storage.getInvoiceById(basicInvoice.id);
        if (!invoice) continue;

        const searchText = query.toLowerCase();
        if (
          invoice.invoiceNumber.toLowerCase().includes(searchText) ||
          invoice.supplier.name.toLowerCase().includes(searchText) ||
          invoice.buyer.name.toLowerCase().includes(searchText) ||
          invoice.items.some(item => item.name.toLowerCase().includes(searchText))
        ) {
          searchResults.push(invoice);
        }
      }

      if (searchResults.length === 0) {
        await this.bot?.sendMessage(chatId, `üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        return;
      }

      let message = `üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ "${query}":\n\n`;
      for (const invoice of searchResults.slice(0, 5)) {
        message += `üßæ ‚Ññ${invoice.invoiceNumber}\n`;
        message += `üìÖ ${invoice.invoiceDate.toLocaleDateString('ru-RU')}\n`;
        message += `üí∞ ${Number(invoice.totalAmount).toLocaleString('ru-RU')} ‚Ç∏\n`;
        message += `üìä ${this.getStatusEmoji(invoice.status || 'draft')} ${this.getStatusText(invoice.status || 'draft')}\n\n`;
      }

      if (searchResults.length > 5) {
        message += `\n... –∏ –µ—â–µ ${searchResults.length - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`;
      }

      await this.bot?.sendMessage(chatId, message);

    } catch (error) {
      console.error('Error in search command:', error);
      await this.bot?.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ");
    }
  }

  private async handleStatsCommand(msg: any) {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id.toString();

    if (!telegramId) return;

    const user = await storage.getUserByTelegramId(telegramId);
    if (!user) {
      await this.bot?.sendMessage(chatId, "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ");
      return;
    }

    try {
      const allInvoices = await storage.getInvoicesByUserId(user.id);
      
      const stats = {
        total: allInvoices.length,
        draft: 0,
        sent: 0,
        paid: 0,
        totalAmount: 0,
        thisMonth: 0,
        thisMonthAmount: 0
      };

      const currentMonth = new Date().getMonth();
      const currentYear = new Date().getFullYear();

      for (const invoice of allInvoices) {
        const status = invoice.status || 'draft';
        stats[status as keyof typeof stats]++;
        stats.totalAmount += Number(invoice.totalAmount);

        const invoiceDate = new Date(invoice.invoiceDate);
        if (invoiceDate.getMonth() === currentMonth && invoiceDate.getFullYear() === currentYear) {
          stats.thisMonth++;
          stats.thisMonthAmount += Number(invoice.totalAmount);
        }
      }

      const message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º</b>\n\n` +
        `üìã –í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤: ${stats.total}\n` +
        `üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: ${stats.draft}\n` +
        `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.sent}\n` +
        `‚úÖ –û–ø–ª–∞—á–µ–Ω–æ: ${stats.paid}\n\n` +
        `üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n` +
        `üíµ –û–±—â–∞—è —Å—É–º–º–∞: ${stats.totalAmount.toLocaleString('ru-RU')} ‚Ç∏\n` +
        `üìÖ –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: ${stats.thisMonth} —Å—á–µ—Ç–æ–≤ –Ω–∞ ${stats.thisMonthAmount.toLocaleString('ru-RU')} ‚Ç∏`;

      await this.bot?.sendMessage(chatId, message, { parse_mode: 'HTML' });

    } catch (error) {
      console.error('Error in stats command:', error);
      await this.bot?.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
    }
  }

  private async handleSettingsCommand(msg: any) {
    const chatId = msg.chat.id;
    await this.bot?.sendMessage(chatId, 
      `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n` +
      `–í –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n` +
      `‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞\n` +
      `‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞—Ö\n` +
      `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n` +
      `–ü–æ–∫–∞ —á—Ç–æ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.`,
      { parse_mode: 'HTML' }
    );
  }

  private async sendInvoiceDetails(chatId: number, invoiceId: string, userId: string) {
    try {
      const invoice = await storage.getInvoiceById(invoiceId);
      if (!invoice || invoice.userId !== userId) {
        await this.bot?.sendMessage(chatId, "‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const message = `üìã <b>–î–µ—Ç–∞–ª–∏ —Å—á–µ—Ç–∞ ‚Ññ${invoice.invoiceNumber}</b>\n\n` +
        `üìÖ –î–∞—Ç–∞: ${invoice.invoiceDate.toLocaleDateString('ru-RU')}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(invoice.status || 'draft')} ${this.getStatusText(invoice.status || 'draft')}\n` +
        `üìÑ –î–æ–≥–æ–≤–æ—Ä: ${invoice.contract || '–ë–µ–∑ –¥–æ–≥–æ–≤–æ—Ä–∞'}\n\n` +
        `<b>üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫:</b>\n` +
        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${invoice.supplier.name}\n` +
        `–ë–ò–ù/–ò–ò–ù: ${invoice.supplier.bin}\n` +
        `–ò–ò–ö: ${invoice.supplier.iik}\n` +
        `–ë–ò–ö: ${invoice.supplier.bik}\n` +
        `–ë–∞–Ω–∫: ${invoice.supplier.bank}\n\n` +
        `<b>üè™ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b>\n` +
        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${invoice.buyer.name}\n` +
        `–ë–ò–ù/–ò–ò–ù: ${invoice.buyer.bin}\n` +
        `–ê–¥—Ä–µ—Å: ${invoice.buyer.address}\n\n` +
        `<b>üì¶ –¢–æ–≤–∞—Ä—ã/—É—Å–ª—É–≥–∏:</b>\n` +
        invoice.items.map((item, index) => 
          `${index + 1}. ${item.name}\n   ${item.quantity} ${item.unit} √ó ${item.price} ‚Ç∏ = ${item.total} ‚Ç∏`
        ).join('\n') + 
        `\n\nüí∞ <b>–ò—Ç–æ–≥–æ: ${Number(invoice.totalAmount).toLocaleString('ru-RU')} ‚Ç∏</b>\n` +
        `${invoice.totalAmountWords}`;

      await this.bot?.sendMessage(chatId, message, { parse_mode: 'HTML' });

    } catch (error) {
      console.error('Error sending invoice details:', error);
      await this.bot?.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å—á–µ—Ç–∞");
    }
  }

  private async sendStatusChangeOptions(chatId: number, invoiceId: string, userId: string) {
    try {
      const invoice = await storage.getInvoiceById(invoiceId);
      if (!invoice || invoice.userId !== userId) {
        await this.bot?.sendMessage(chatId, "‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const currentStatus = invoice.status || 'draft';
      const message = `üìä –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ ‚Ññ${invoice.invoiceNumber}\n\n` +
        `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(currentStatus)} ${this.getStatusText(currentStatus)}`;

      await this.bot?.sendMessage(chatId, message, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìù –ß–µ—Ä–Ω–æ–≤–∏–∫', callback_data: `set_status_draft_${invoiceId}` },
              { text: 'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω', callback_data: `set_status_sent_${invoiceId}` }
            ],
            [
              { text: '‚úÖ –û–ø–ª–∞—á–µ–Ω', callback_data: `set_status_paid_${invoiceId}` }
            ]
          ]
        }
      });

    } catch (error) {
      console.error('Error sending status options:', error);
      await this.bot?.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞");
    }
  }

  private async changeInvoiceStatus(chatId: number, invoiceId: string, newStatus: string, userId: string) {
    try {
      const invoice = await storage.getInvoiceById(invoiceId);
      if (!invoice || invoice.userId !== userId) {
        await this.bot?.sendMessage(chatId, "‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
      await storage.updateInvoice(invoiceId, { status: newStatus });

      const message = `‚úÖ –°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ ‚Ññ${invoice.invoiceNumber} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:\n` +
        `${this.getStatusEmoji(newStatus)} ${this.getStatusText(newStatus)}`;

      await this.bot?.sendMessage(chatId, message);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
      if (newStatus === 'paid') {
        await this.bot?.sendMessage(chatId, 
          `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –°—á–µ—Ç ‚Ññ${invoice.invoiceNumber} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π!`
        );
      }

    } catch (error) {
      console.error('Error changing invoice status:', error);
      await this.bot?.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
    }
  }

  private async copyInvoice(chatId: number, invoiceId: string, userId: string) {
    try {
      const response = await fetch(`http://localhost:5000/api/invoices/${invoiceId}/copy`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Internal-Request': 'true'
        },
        body: JSON.stringify({ userId })
      });

      if (!response.ok) {
        throw new Error('Failed to copy invoice');
      }

      const newInvoice = await response.json();

      await this.bot?.sendMessage(chatId, 
        `üìã –°—á–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!\n\n` +
        `–ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: ${newInvoice.invoiceNumber}\n` +
        `–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n\n` +
        `–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Å—á–µ—Ç –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.`
      );

    } catch (error) {
      console.error('Error copying invoice:', error);
      await this.bot?.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞");
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞)
  async notifyInvoiceCreated(telegramId: string, invoice: any) {
    if (!this.bot) return;

    try {
      const message = `üÜï <b>–ù–æ–≤—ã–π —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n` +
        `üìÑ –ù–æ–º–µ—Ä: ${invoice.invoiceNumber}\n` +
        `üìÖ –î–∞—Ç–∞: ${new Date(invoice.invoiceDate).toLocaleDateString('ru-RU')}\n` +
        `üí∞ –°—É–º–º–∞: ${Number(invoice.totalAmount).toLocaleString('ru-RU')} ‚Ç∏\n` +
        `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${invoice.supplier?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üè™ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${invoice.buyer?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

      await this.bot.sendMessage(telegramId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìÑ –°–∫–∞—á–∞—Ç—å PDF', callback_data: `download_pdf_${invoice.id}` },
              { text: 'üìä –°–∫–∞—á–∞—Ç—å Excel', callback_data: `download_excel_${invoice.id}` }
            ],
            [
              { text: 'üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url: `${this.getBaseUrl()}/invoice/${invoice.id}` }
            ]
          ]
        }
      });

    } catch (error) {
      console.error('Error sending invoice creation notification:', error);
    }
  }

  // Helper method to show invoices list (same as /invoices command)
  private async showInvoicesList(chatId: number, userId: string) {
    try {
      const basicInvoices = await storage.getInvoicesByUserId(userId);
      
      if (basicInvoices.length === 0) {
        await this.bot?.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤");
        return;
      }

      // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const invoicesToShow = basicInvoices.slice(0, 10); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å—á–µ—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      
      for (const basicInvoice of invoicesToShow) {
        const invoice = await storage.getInvoiceById(basicInvoice.id);
        if (!invoice) continue;

        const message = `üßæ <b>–°—á–µ—Ç ‚Ññ${invoice.invoiceNumber}</b>\n` +
                       `üìÖ –î–∞—Ç–∞: ${invoice.invoiceDate.toLocaleDateString('ru-RU')}\n` +
                       `üí∞ –°—É–º–º–∞: ${Number(invoice.totalAmount).toLocaleString('ru-RU')} ‚Ç∏\n` +
                       `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${invoice.supplier.name}\n` +
                       `üè™ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${invoice.buyer.name}\n` +
                       `üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(invoice.status || 'draft')} ${this.getStatusText(invoice.status || 'draft')}`;

        await this.bot?.sendMessage(chatId, message, {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìÑ PDF', callback_data: `download_pdf_${invoice.id}` },
                { text: 'üìä Excel', callback_data: `download_excel_${invoice.id}` }
              ],
              [
                { text: 'üìã –î–µ—Ç–∞–ª–∏', callback_data: `details_${invoice.id}` },
                { text: 'üìä –°—Ç–∞—Ç—É—Å', callback_data: `status_${invoice.id}` },
                { text: 'üìù –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', callback_data: `copy_${invoice.id}` }
              ]
            ]
          }
        });
      }

      // –ï—Å–ª–∏ —Å—á–µ—Ç–æ–≤ –±–æ–ª—å—à–µ 10, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
      if (basicInvoices.length > 10) {
        await this.bot?.sendMessage(chatId, 
          `üìã –ü–æ–∫–∞–∑–∞–Ω–æ ${invoicesToShow.length} –∏–∑ ${basicInvoices.length} —Å—á–µ—Ç–æ–≤.\n\n` +
          `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫:\n` +
          `/search <–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ>`
        );
      }
    } catch (error) {
      console.error('Error showing invoices list:', error);
      await this.bot?.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤");
    }
  }

  // Helper method to show help
  private async showHelp(chatId: number) {
    await this.bot?.sendMessage(chatId,
      `ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n\n` +
      `–≠—Ç–æ—Ç –±–æ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—á–µ—Ç–æ–≤ –†–ö.\n\n` +
      `–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n` +
      `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Å—á–µ—Ç–æ–≤\n` +
      `‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö PDF –∏ Excel —Ñ–∞–π–ª–æ–≤\n` +
      `‚Ä¢ –ü–æ–∏—Å–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º\n` +
      `‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Å—á–µ—Ç–æ–≤\n` +
      `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å—á–µ—Ç–∞—Ö\n\n` +
      `–ö–æ–º–∞–Ω–¥—ã:\n` +
      `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
      `/invoices - –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤\n` +
      `/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ —Å—á–µ—Ç–æ–≤\n` +
      `/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º\n` +
      `/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n` +
      `/create - –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç\n` +
      `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`
    );
  }

  // Helper method to show statistics
  private async showStats(chatId: number, userId: string) {
    try {
      const invoices = await storage.getInvoicesByUserId(userId);
      
      if (invoices.length === 0) {
        await this.bot?.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
        return;
      }

      const totalAmount = invoices.reduce((sum, inv) => sum + Number(inv.totalAmount), 0);
      const draftCount = invoices.filter(inv => (inv.status || 'draft') === 'draft').length;
      const sentCount = invoices.filter(inv => (inv.status || 'draft') === 'sent').length;
      const paidCount = invoices.filter(inv => (inv.status || 'draft') === 'paid').length;

      const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—á–µ—Ç–æ–≤\n\n` +
                     `üìã –í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤: ${invoices.length}\n` +
                     `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toLocaleString('ru-RU')} ‚Ç∏\n` +
                     `üí∞ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: ${Math.round(totalAmount / invoices.length).toLocaleString('ru-RU')} ‚Ç∏\n\n` +
                     `üìä –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n` +
                     `üü° –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: ${draftCount}\n` +
                     `üîµ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentCount}\n` +
                     `üü¢ –û–ø–ª–∞—á–µ–Ω–æ: ${paidCount}\n\n` +
                     `üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—á–µ—Ç: ${invoices[invoices.length - 1]?.invoiceDate.toLocaleDateString('ru-RU') || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`;

      await this.bot?.sendMessage(chatId, message);
    } catch (error) {
      console.error('Error showing stats:', error);
      await this.bot?.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
    }
  }

  private async showUserStats(chatId: number, userId: string) {
    try {
      const invoices = await storage.getInvoicesWithDetailsByUserId(userId);
      
      if (invoices.length === 0) {
        await this.bot?.sendMessage(chatId, 
          'üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n' +
          '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤.\n\n' +
          '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!',
          { 
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç', callback_data: 'create_invoice' }]
              ]
            }
          }
        );
        return;
      }

      // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      const totalAmount = invoices.reduce((sum, invoice) => sum + Number(invoice.totalAmount), 0);
      const draftCount = invoices.filter(inv => inv.status === 'draft').length;
      const sentCount = invoices.filter(inv => inv.status === 'sent').length;
      const paidCount = invoices.filter(inv => inv.status === 'paid').length;
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
      const currentMonth = new Date().getMonth();
      const currentYear = new Date().getFullYear();
      const currentMonthInvoices = invoices.filter(inv => {
        const invDate = new Date(inv.invoiceDate);
        return invDate.getMonth() === currentMonth && invDate.getFullYear() === currentYear;
      });
      const currentMonthAmount = currentMonthInvoices.reduce((sum, inv) => sum + Number(inv.totalAmount), 0);

      await this.bot?.sendMessage(chatId, 
        `üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n` +
        `**–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n` +
        `üìÑ –í—Å–µ–≥–æ —Å—á–µ—Ç–æ–≤: ${invoices.length}\n` +
        `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toLocaleString('ru-RU')} ‚Ç∏\n\n` +
        `**–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**\n` +
        `üìù –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: ${draftCount}\n` +
        `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ: ${sentCount}\n` +
        `‚úÖ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ: ${paidCount}\n\n` +
        `**–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:**\n` +
        `üìÑ –°—á–µ—Ç–æ–≤: ${currentMonthInvoices.length}\n` +
        `üí∞ –°—É–º–º–∞: ${currentMonthAmount.toLocaleString('ru-RU')} ‚Ç∏`,
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìã –ú–æ–∏ —Å—á–µ—Ç–∞', callback_data: 'list_invoices' },
                { text: '‚ûï –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç', callback_data: 'create_invoice' }
              ],
              [
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
              ]
            ]
          }
        }
      );
    } catch (error) {
      console.error('Error showing user stats:', error);
      await this.bot?.sendMessage(chatId, 
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }
}

export const telegramBot = new InvoiceTelegramBot();
