import TelegramBot from 'node-telegram-bot-api';
import { storage } from './storage';
import { InvoiceWithDetails } from '@shared/schema';

class InvoiceTelegramBot {
  private bot: TelegramBot | null = null;

  constructor() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (token) {
      this.bot = new TelegramBot(token, { polling: false });
      this.setupCommands();
      this.setupWebhook();
    }
  }

  private async setupWebhook() {
    if (!this.bot) return;
    
    try {
      const webhookUrl = `${process.env.REPLIT_DEV_DOMAIN || 'https://bc700157-2325-4ed8-89d2-b630caa0879c-00-358a4svxmccgk.picard.replit.dev'}/api/telegram/webhook/${process.env.TELEGRAM_BOT_TOKEN}`;
      await this.bot.setWebHook(webhookUrl);
      console.log('Telegram webhook set to:', webhookUrl);
    } catch (error) {
      console.error('Failed to set Telegram webhook:', error);
    }
  }

  private setupCommands() {
    if (!this.bot) return;

    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();

      if (!telegramId) return;

      const user = await storage.getUserByTelegramId(telegramId);
      
      if (user) {
        await this.bot?.sendMessage(chatId, 
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—á–µ—Ç–æ–≤ –†–ö! üßæ\n\n` +
          `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π.\n\n` +
          `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
          `/invoices - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å—á–µ—Ç–æ–≤\n` +
          `/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç\n` +
          `/help - –ü–æ–º–æ—â—å`
        );
      } else {
        await this.bot?.sendMessage(chatId,
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n` +
          `–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —á–µ—Ä–µ–∑ Telegram.\n\n` +
          `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram"`
        );
      }
    });

    this.bot.onText(/\/invoices/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();

      if (!telegramId) return;

      const user = await storage.getUserByTelegramId(telegramId);
      if (!user) {
        await this.bot?.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ");
        return;
      }

      const invoices = await storage.getInvoicesByUserId(user.id);
      
      if (invoices.length === 0) {
        await this.bot?.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤");
        return;
      }

      if (invoices.length <= 5) {
        // Show detailed list with buttons for few invoices
        for (const invoice of invoices) {
          const message = `üßæ –°—á–µ—Ç ‚Ññ${invoice.invoiceNumber}\n` +
                         `üìÖ –î–∞—Ç–∞: ${invoice.invoiceDate.toLocaleDateString('ru-RU')}\n` +
                         `üí∞ –°—É–º–º–∞: ${invoice.totalAmount?.toLocaleString('ru-RU')} ‚Ç∏\n` +
                         `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${invoice.supplierName}\n` +
                         `üè™ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${invoice.buyerName}`;

          await this.bot?.sendMessage(chatId, message, {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üìÑ PDF', callback_data: `download_pdf_${invoice.id}` },
                  { text: 'üìä Excel', callback_data: `download_excel_${invoice.id}` }
                ]
              ]
            }
          });
        }
      } else {
        // Show simple list for many invoices
        let message = "üìã –í–∞—à–∏ —Å—á–µ—Ç–∞:\n\n";
        for (const invoice of invoices.slice(0, 10)) {
          message += `üßæ ‚Ññ${invoice.invoiceNumber} –æ—Ç ${invoice.invoiceDate.toLocaleDateString('ru-RU')}\n`;
          message += `üí∞ –°—É–º–º–∞: ${invoice.totalAmount?.toLocaleString('ru-RU')} ‚Ç∏\n`;
          message += `üìä –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(invoice.status || 'draft')} ${this.getStatusText(invoice.status || 'draft')}\n\n`;
        }

        if (invoices.length > 10) {
          message += `\n... –∏ –µ—â–µ ${invoices.length - 10} —Å—á–µ—Ç–æ–≤\n`;
          message += `–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É`;
        }

        await this.bot?.sendMessage(chatId, message);
      }
    });

    this.bot.onText(/\/create/, async (msg) => {
      const chatId = msg.chat.id;
      await this.bot?.sendMessage(chatId,
        `–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É.\n\n` +
        `–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤.`
      );
    });

    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;
      await this.bot?.sendMessage(chatId,
        `ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n\n` +
        `–≠—Ç–æ—Ç –±–æ—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—á–µ—Ç–æ–≤ –†–ö.\n\n` +
        `–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n` +
        `‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Å—á–µ—Ç–æ–≤\n` +
        `‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö PDF –∏ Excel —Ñ–∞–π–ª–æ–≤\n` +
        `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å—á–µ—Ç–∞—Ö\n\n` +
        `–ö–æ–º–∞–Ω–¥—ã:\n` +
        `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
        `/invoices - –°–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤\n` +
        `/create - –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç\n` +
        `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞`
      );
    });

    // Handle callback queries for file downloads
    this.bot.on('callback_query', async (callbackQuery) => {
      const chatId = callbackQuery.message?.chat.id;
      const telegramId = callbackQuery.from.id.toString();
      const data = callbackQuery.data;

      if (!chatId || !data) return;

      const user = await storage.getUserByTelegramId(telegramId);
      if (!user) {
        await this.bot?.answerCallbackQuery(callbackQuery.id, {
          text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"
        });
        return;
      }

      try {
        if (data.startsWith('download_pdf_')) {
          const invoiceId = data.replace('download_pdf_', '');
          await this.bot?.answerCallbackQuery(callbackQuery.id, {
            text: "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF —Ñ–∞–π–ª..."
          });
          
          await this.bot?.sendMessage(chatId, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Ñ–∞–π–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");
          
          // For now, send a message that PDF generation will be implemented
          await this.bot?.sendMessage(chatId, 
            "üìÑ PDF —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É.\n\n" +
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram' –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ PDF —Ñ–∞–π–ª–∞."
          );

        } else if (data.startsWith('download_excel_')) {
          const invoiceId = data.replace('download_excel_', '');
          await this.bot?.answerCallbackQuery(callbackQuery.id, {
            text: "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª..."
          });
          
          await this.bot?.sendMessage(chatId, "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");
          
          // For now, send a message that Excel generation will be implemented
          await this.bot?.sendMessage(chatId, 
            "üìä Excel —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É.\n\n" +
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ–≥–æ Excel —Ñ–∞–π–ª–∞."
          );
        }

      } catch (error) {
        console.error('Error handling callback query:', error);
        await this.bot?.answerCallbackQuery(callbackQuery.id, {
          text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        });
      }
    });
  }

  async sendInvoice(telegramId: string, invoice: InvoiceWithDetails) {
    if (!this.bot) return;

    try {
      const message = this.formatInvoiceMessage(invoice);
      
      await this.bot.sendMessage(telegramId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìÑ –°–∫–∞—á–∞—Ç—å PDF', callback_data: `download_pdf_${invoice.id}` },
              { text: 'üìä –°–∫–∞—á–∞—Ç—å Excel', callback_data: `download_excel_${invoice.id}` }
            ],
            [
              { text: 'üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', url: `${process.env.FRONTEND_URL}/invoice/${invoice.id}` }
            ]
          ]
        }
      });
    } catch (error) {
      console.error('Error sending invoice to Telegram:', error);
    }
  }

  async sendInvoiceWithPDF(telegramId: string, invoice: any, pdfBuffer: Buffer) {
    if (!this.bot) return;

    try {
      const message = `üìÑ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ${invoice.invoiceNumber}\n\n` +
        `üìÖ –î–∞—Ç–∞: ${new Date(invoice.invoiceDate).toLocaleDateString('ru-RU')}\n` +
        `üí∞ –°—É–º–º–∞: ${invoice.totalAmount.toLocaleString('ru-RU')} ‚Ç∏\n` +
        `üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${invoice.supplierName}\n` +
        `üè™ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${invoice.buyerName}`;

      console.log('Sending PDF document to Telegram ID:', telegramId);
      console.log('PDF buffer size:', pdfBuffer.length);
      
      await this.bot.sendDocument(telegramId, pdfBuffer, {
        caption: message
      }, {
        filename: `–°—á–µ—Ç_${invoice.invoiceNumber}_${new Date().toISOString().slice(0,10)}.pdf`,
        contentType: 'application/pdf'
      });
      
      console.log('PDF document sent successfully');
    } catch (error) {
      console.error('Failed to send invoice with PDF:', error);
      throw error;
    }
  }

  async processUpdate(update: any) {
    if (!this.bot) return;
    
    this.bot.processUpdate(update);
  }

  private formatInvoiceMessage(invoice: InvoiceWithDetails): string {
    return `
üßæ <b>–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ${invoice.invoiceNumber}</b>
üìÖ –æ—Ç ${invoice.invoiceDate.toLocaleDateString('ru-RU')}

<b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b>
${invoice.supplier.name}
–ë–ò–ù/–ò–ò–ù: ${invoice.supplier.bin}

<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b>
${invoice.buyer.name}
–ë–ò–ù/–ò–ò–ù: ${invoice.buyer.bin}

<b>–£—Å–ª—É–≥–∏/—Ç–æ–≤–∞—Ä—ã:</b>
${invoice.items.map((item, index) => 
  `${index + 1}. ${item.name}\n   ${item.quantity} ${item.unit} √ó ${item.price} ‚Ç∏ = ${item.total} ‚Ç∏`
).join('\n')}

üí∞ <b>–ò—Ç–æ–≥–æ: ${invoice.totalAmount} ‚Ç∏</b>
${invoice.totalAmountWords}

üìã –°—Ç–∞—Ç—É—Å: ${this.getStatusEmoji(invoice.status || 'draft')} ${this.getStatusText(invoice.status || 'draft')}
    `.trim();
  }

  private getStatusEmoji(status: string): string {
    switch (status) {
      case 'draft': return 'üìù';
      case 'sent': return 'üì§';
      case 'paid': return '‚úÖ';
      default: return 'üìÑ';
    }
  }

  private getStatusText(status: string): string {
    switch (status) {
      case 'draft': return '–ß–µ—Ä–Ω–æ–≤–∏–∫';
      case 'sent': return '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω';
      case 'paid': return '–û–ø–ª–∞—á–µ–Ω';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
    }
  }
}

export const telegramBot = new InvoiceTelegramBot();
