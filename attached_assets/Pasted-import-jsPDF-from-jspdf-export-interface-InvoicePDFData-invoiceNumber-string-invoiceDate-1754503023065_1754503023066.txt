import jsPDF from 'jspdf';

export interface InvoicePDFData {
  invoiceNumber: string;
  invoiceDate: string; // Ожидается в формате ISO (например, "2025-05-16")
  contract: string;
  supplier: {
    name: string;
    bin: string;
    address: string;
    bank: string;
    bik: string;
    iik: string;
    kbe: string;
    paymentCode: string;
  };
  buyer: {
    name: string;
    bin: string;
    address: string;
  };
  services: {
    name: string;
    quantity: number;
    unit: string;
    price: number;
    total: number;
  }[];
  totalAmount: number;
  totalAmountWords: string;
}

// Вспомогательная функция для форматирования чисел
function formatCurrency(value: number): string {
    // Форматирование с двумя десятичными знаками и разделителями тысяч
    return value.toLocaleString('ru-RU', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    }).replace(',', '.'); // Заменяем запятую на точку для соответствия формату образца
}

// Вспомогательная функция для форматирования даты как в образце
function formatDateToRussian(dateString: string): string {
    const date = new Date(dateString);
    const options: Intl.DateTimeFormatOptions = { day: 'numeric', month: 'long', year: 'numeric' };
    // Заменяем запятую на пробел, если она появляется (например, "16 мая, 2025" -> "16 мая 2025")
    return date.toLocaleDateString('ru-RU', options).replace(',', '');
}

export class PDFGenerator {
  static async generateInvoicePDF(data: InvoicePDFData, signature?: string, stamp?: string): Promise<Blob> {
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4',
      compress: true,
      putOnlyUsedFonts: true
    });

    const margin = 10; // Левое и правое поля
    const pageWidth = 210;
    const contentWidth = pageWidth - 2 * margin;

    // Установка базового шрифта
    pdf.setFont('helvetica', 'normal');

    // --- Предупреждение ---
    pdf.setFontSize(8);
    const warningText = [
      'Внимание! Оплата данного счета означает согласие с условиями поставки товара.',
      'Уведомление об оплате обязательно, в противном случае не гарантируется наличие товара на складе.',
      'Товар отпускается по факту прихода денег на р/с Поставщика, самовывозом,',
      'при наличии доверенности и документов удостоверяющих личность.'
    ];
    let currentY = 15;
    warningText.forEach((text, index) => {
      pdf.text(text, margin, currentY + (index * 4));
    });

    // --- Образец платежного поручения ---
    currentY = 35; // Начальная Y-координата для этого блока
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Образец платежного поручения', pageWidth / 2, currentY, { align: 'center' });

    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(8);

    const tableY = currentY + 3; // Y-координата начала таблицы
    const rowHeight1 = 8;  // Высота строки для "Бенефициар"
    const rowHeight2 = 10; // Высота строки с данными поставщика
    const rowHeight3 = 8;  // Высота строки для "Банк бенефициара"
    const rowHeight4 = 10; // Высота строки с данными банка
    const tableHeight = rowHeight1 + rowHeight2 + rowHeight3 + rowHeight4; // Общая высота таблицы

    // Ширины колонок в таблице оплаты
    const col1Width = 110; // Ширина колонки "Бенефициар" и "Банк бенефициара"
    const col2Width = 50;  // Ширина колонки "ИИК" и "БИК"
    const col3Width = 30;  // Ширина колонки "КБе" и "Код назначения платежа"

    // Основная рамка таблицы
    pdf.rect(margin, tableY, contentWidth, tableHeight);

    // Горизонтальные линии внутри таблицы
    pdf.line(margin, tableY + rowHeight1, margin + contentWidth, tableY + rowHeight1);
    pdf.line(margin, tableY + rowHeight1 + rowHeight2, margin + contentWidth, tableY + rowHeight1 + rowHeight2);
    pdf.line(margin, tableY + rowHeight1 + rowHeight2 + rowHeight3, margin + contentWidth, tableY + rowHeight1 + rowHeight2 + rowHeight3);

    // Вертикальные линии внутри таблицы
    pdf.line(margin + col1Width, tableY, margin + col1Width, tableY + tableHeight);
    pdf.line(margin + col1Width + col2Width, tableY, margin + col1Width + col2Width, tableY + tableHeight);

    // --- Заголовки строк ---
    pdf.setFont('helvetica', 'bold');
    pdf.text('Бенефициар:', margin + 1, tableY + 6);
    pdf.text('ИИК', margin + col1Width + col2Width / 2, tableY + 6, { align: 'center' });
    pdf.text('КБе', margin + col1Width + col2Width + col3Width / 2, tableY + 6, { align: 'center' });

    pdf.text('Банк бенефициара:', margin + 1, tableY + rowHeight1 + rowHeight2 + 6);
    pdf.text('БИК', margin + col1Width + col2Width / 2, tableY + rowHeight1 + rowHeight2 + 6, { align: 'center' });
    pdf.text('Код назначения платежа', margin + col1Width + col2Width + col3Width / 2, tableY + rowHeight1 + rowHeight2 + 6, { align: 'center' });

    // --- Данные поставщика ---
    pdf.setFont('helvetica', 'normal');
    // Имя поставщика (первая строка)
    pdf.text(data.supplier.name, margin + 1, tableY + rowHeight1 + 6);
    // ИИК (первая строка)
    pdf.text(data.supplier.iik, margin + col1Width + 1, tableY + rowHeight1 + 6);
    // КБе (первая строка)
    pdf.text(data.supplier.kbe, margin + col1Width + col2Width + 1, tableY + rowHeight1 + 6);

    // БИН и адрес (вторая строка)
    pdf.text(`БИН/ИИН: ${data.supplier.bin}`, margin + 1, tableY + rowHeight1 + rowHeight2 - 2);
    // (Адрес убран из таблицы оплаты по образцу, перенесен в блок "Поставщик")

    // --- Данные банка ---
    // Название банка
    pdf.text(data.supplier.bank, margin + 1, tableY + rowHeight1 + rowHeight2 + rowHeight3 + 6);
    // БИК
    pdf.text(data.supplier.bik, margin + col1Width + 1, tableY + rowHeight1 + rowHeight2 + rowHeight3 + 6);
    // Код назначения платежа
    pdf.text(data.supplier.paymentCode, margin + col1Width + col2Width + 1, tableY + rowHeight1 + rowHeight2 + rowHeight3 + 6);

    // --- Заголовок счета ---
    currentY = tableY + tableHeight + 8; // Отступ после таблицы оплаты
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    const invoiceDateFormatted = formatDateToRussian(data.invoiceDate);
    pdf.text(`Счет на оплату № ${data.invoiceNumber} от ${invoiceDateFormatted}`, margin, currentY);

    // Линия под заголовком
    pdf.line(margin, currentY + 4, margin + contentWidth, currentY + 4);

    // --- Информация о сторонах ---
    currentY = currentY + 10; // Отступ после линии
    pdf.setFontSize(9);
    pdf.setFont('helvetica', 'normal');

    // Поставщик
    const supplierText = `Поставщик: БИН/ИИН: ${data.supplier.bin}, ${data.supplier.name}, ${data.supplier.address}`;
    pdf.text(supplierText, margin, currentY, { maxWidth: contentWidth });

    // Покупатель
    currentY += 7;
    const buyerText = `Покупатель: БИН/ИИН: ${data.buyer.bin}, ${data.buyer.name}, ${data.buyer.address}`;
    pdf.text(buyerText, margin, currentY, { maxWidth: contentWidth });

    // Договор
    currentY += 7;
    pdf.text(`Договор: ${data.contract}`, margin, currentY);

    // --- Таблица услуг ---
    currentY += 10; // Отступ перед таблицей
    const tableStartY = currentY;
    const rowHeight = 8; // Высота строки таблицы услуг

    // Ширины колонок таблицы услуг (скорректированы под образец)
    const serviceColWidths = [10, 15, 85, 20, 15, 25, 20]; // №, Код, Наименование, Кол-во, Ед., Цена, Сумма
    const servicesTableWidth = serviceColWidths.reduce((a, b) => a + b, 0);
    let colX = margin;

    // Рамка таблицы услуг
    pdf.rect(margin, tableStartY, servicesTableWidth, rowHeight * (data.services.length + 2)); // +1 для заголовка, +1 для итого

    // Вертикальные линии таблицы услуг
    for (let i = 0; i < serviceColWidths.length; i++) {
      pdf.line(colX, tableStartY, colX, tableStartY + rowHeight * (data.services.length + 2));
      colX += serviceColWidths[i];
    }
    pdf.line(colX, tableStartY, colX, tableStartY + rowHeight * (data.services.length + 2)); // Последняя линия

    // Горизонтальные линии таблицы услуг
    for (let i = 0; i <= data.services.length + 1; i++) {
      pdf.line(margin, tableStartY + rowHeight * i, margin + servicesTableWidth, tableStartY + rowHeight * i);
    }

    // Заголовки таблицы услуг
    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(8);
    pdf.text('№', margin + serviceColWidths[0] / 2, tableStartY + rowHeight / 2 + 2, { align: 'center' });
    pdf.text('Код', margin + serviceColWidths[0] + serviceColWidths[1] / 2, tableStartY + rowHeight / 2 + 2, { align: 'center' });
    pdf.text('Наименование', margin + serviceColWidths[0] + serviceColWidths[1] + serviceColWidths[2] / 2, tableStartY + rowHeight / 2 + 2, { align: 'center' });
    pdf.text('Кол-во', margin + serviceColWidths[0] + serviceColWidths[1] + serviceColWidths[2] + serviceColWidths[3] / 2, tableStartY + rowHeight / 2 + 2, { align: 'center' });
    pdf.text('Ед.', margin + serviceColWidths[0] + serviceColWidths[1] + serviceColWidths[2] + serviceColWidths[3] + serviceColWidths[4] / 2, tableStartY + rowHeight / 2 + 2, { align: 'center' });
    pdf.text('Цена', margin + serviceColWidths[0] + serviceColWidths[1] + serviceColWidths[2] + serviceColWidths[3] + serviceColWidths[4] + serviceColWidths[5] / 2, tableStartY + rowHeight / 2 + 2, { align: 'center' });
    pdf.text('Сумма', margin + serviceColWidths[0] + serviceColWidths[1] + serviceColWidths[2] + serviceColWidths[3] + serviceColWidths[4] + serviceColWidths[5] + serviceColWidths[6] / 2, tableStartY + rowHeight / 2 + 2, { align: 'center' });

    // Строки таблицы услуг
    pdf.setFont('helvetica', 'normal');
    let currentTableRowY = tableStartY + rowHeight;

    data.services.forEach((service, index) => {
      pdf.text((index + 1).toString(), margin + serviceColWidths[0] / 2, currentTableRowY + rowHeight / 2 + 2, { align: 'center' });
      // pdf.text('', ...); // Код - пустой
      pdf.text(service.name, margin + serviceColWidths[0] + serviceColWidths[1] + 1, currentTableRowY + rowHeight / 2 + 2, { maxWidth: serviceColWidths[2] - 2 });
      pdf.text(service.quantity.toLocaleString('ru-RU', { minimumFractionDigits: 1 }), margin + serviceColWidths[0] + serviceColWidths[1] + serviceColWidths[2] + serviceColWidths[3] / 2, currentTableRowY + rowHeight / 2 + 2, { align: 'center' });
      pdf.text(service.unit, margin + serviceColWidths[0] + serviceColWidths[1] + serviceColWidths[2] + serviceColWidths[3] + serviceColWidths[4] / 2, currentTableRowY + rowHeight / 2 + 2, { align: 'center' });
      pdf.text(formatCurrency(service.price), margin + serviceColWidths[0] + serviceColWidths[1] + serviceColWidths[2] + serviceColWidths[3] + serviceColWidths[4] + serviceColWidths[5] - 1, currentTableRowY + rowHeight / 2 + 2, { align: 'right' });
      pdf.text(formatCurrency(service.total), margin + serviceColWidths[0] + serviceColWidths[1] + serviceColWidths[2] + serviceColWidths[3] + serviceColWidths[4] + serviceColWidths[5] + serviceColWidths[6] - 1, currentTableRowY + rowHeight / 2 + 2, { align: 'right' });

      currentTableRowY += rowHeight;
    });

    // Строка "Итого"
    pdf.setFont('helvetica', 'bold');
    pdf.text('Итого:', margin + serviceColWidths[0] + serviceColWidths[1] + serviceColWidths[2] + serviceColWidths[3] + serviceColWidths[4] + (serviceColWidths[5] / 2), currentTableRowY + rowHeight / 2 + 2, { align: 'center' });
    pdf.text(formatCurrency(data.totalAmount), margin + serviceColWidths[0] + serviceColWidths[1] + serviceColWidths[2] + serviceColWidths[3] + serviceColWidths[4] + serviceColWidths[5] + serviceColWidths[6] - 1, currentTableRowY + rowHeight / 2 + 2, { align: 'right' });

    // --- Итоговая сумма словами и количество ---
    currentY = tableStartY + rowHeight * (data.services.length + 2) + 8; // Отступ после таблицы
    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(9);
    pdf.text(`Всего наименований ${data.services.length}, на сумму ${formatCurrency(data.totalAmount)} KZT`, margin, currentY);
    currentY += 6;
    pdf.text(`Всего к оплате: ${data.totalAmountWords}`, margin, currentY);

    // --- Подпись ---
    currentY += 15; // Отступ перед линией подписи
    pdf.line(margin, currentY, margin + contentWidth, currentY); // Линия подписи
    currentY += 6;
    pdf.text('Исполнитель:', margin, currentY + 4);
    pdf.text('/бухгалтер/', margin + contentWidth - 40, currentY + 4); // Правый край

    // Добавление подписи и печати
    if (signature) {
      try {
        // Позиционирование подписи левее надписи "/бухгалтер/"
        pdf.addImage(signature, 'PNG', margin + contentWidth - 70, currentY - 8, 30, 15);
      } catch (error) {
        console.warn('Could not add signature image to PDF:', error);
      }
    }

    if (stamp) {
      try {
        // Позиционирование печати левее подписи
        pdf.addImage(stamp, 'PNG', margin + contentWidth - 110, currentY - 15, 35, 35);
      } catch (error) {
        console.warn('Could not add stamp image to PDF:', error);
      }
    }

    return pdf.output('blob');
  }

  static downloadPDF(blob: Blob, filename: string) {
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
}